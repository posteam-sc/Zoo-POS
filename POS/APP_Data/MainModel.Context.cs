//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POS.APP_Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class POSEntities : DbContext
    {
        public POSEntities()
            : base("name=POSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Authorize> Authorizes { get; set; }
        public DbSet<Brand> Brands { get; set; }
        public DbSet<City> Cities { get; set; }
        public DbSet<Counter> Counters { get; set; }
        public DbSet<DailyRecord> DailyRecords { get; set; }
        public DbSet<DeleteLog> DeleteLogs { get; set; }
        public DbSet<PaymentType> PaymentTypes { get; set; }
        public DbSet<pjForm> pjForms { get; set; }
        public DbSet<pjForms_Localization> pjForms_Localization { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductCategory> ProductCategories { get; set; }
        public DbSet<ProductPriceChange> ProductPriceChanges { get; set; }
        public DbSet<ProductSubCategory> ProductSubCategories { get; set; }
        public DbSet<RoleManagement> RoleManagements { get; set; }
        public DbSet<Setting> Settings { get; set; }
        public DbSet<Shop> Shops { get; set; }
        public DbSet<tblPeriod> tblPeriods { get; set; }
        public DbSet<Ticket> Tickets { get; set; }
        public DbSet<TicketButtonAssign> TicketButtonAssigns { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<TransactionDetail> TransactionDetails { get; set; }
        public DbSet<Turnstile> Turnstiles { get; set; }
        public DbSet<TurnStileServer> TurnStileServers { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<tblTime> tblTimes { get; set; }
    
        public virtual int AutoBackup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoBackup");
        }
    
        public virtual ObjectResult<AverageMonthlySaleReport_Result> AverageMonthlySaleReport(Nullable<System.DateTime> year, Nullable<long> productId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReport_Result>("AverageMonthlySaleReport", yearParameter, productIdParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportBrandId_Result> AverageMonthlySaleReportBrandId(Nullable<System.DateTime> year, Nullable<int> brandId, string currentshortcode)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportBrandId_Result>("AverageMonthlySaleReportBrandId", yearParameter, brandIdParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportByBrandIdAndCounterId_Result> AverageMonthlySaleReportByBrandIdAndCounterId(Nullable<System.DateTime> year, Nullable<int> brandId, Nullable<int> counterId, string currentshortcode)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportByBrandIdAndCounterId_Result>("AverageMonthlySaleReportByBrandIdAndCounterId", yearParameter, brandIdParameter, counterIdParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportByDateTime_Result> AverageMonthlySaleReportByDateTime(Nullable<System.DateTime> year, string currentshortcode)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportByDateTime_Result>("AverageMonthlySaleReportByDateTime", yearParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportCounterId_Result> AverageMonthlySaleReportCounterId(Nullable<System.DateTime> year, Nullable<int> counterId, string currentshortcode)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportCounterId_Result>("AverageMonthlySaleReportCounterId", yearParameter, counterIdParameter, currentshortcodeParameter);
        }
    
        public virtual int ClearDBConnections()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearDBConnections");
        }
    
        public virtual int ExportDatabase(string path, string backUpName)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var backUpNameParameter = backUpName != null ?
                new ObjectParameter("BackUpName", backUpName) :
                new ObjectParameter("BackUpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportDatabase", pathParameter, backUpNameParameter);
        }
    
        public virtual ObjectResult<string> GetProductCode(string prefix, Nullable<int> rlength, Nullable<int> sLength)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(string));
    
            var rlengthParameter = rlength.HasValue ?
                new ObjectParameter("rlength", rlength) :
                new ObjectParameter("rlength", typeof(int));
    
            var sLengthParameter = sLength.HasValue ?
                new ObjectParameter("sLength", sLength) :
                new ObjectParameter("sLength", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetProductCode", prefixParameter, rlengthParameter, sLengthParameter);
        }
    
        public virtual ObjectResult<GetProductReport_Result> GetProductReport(Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> brandId, string skuCode)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var skuCodeParameter = skuCode != null ?
                new ObjectParameter("SkuCode", skuCode) :
                new ObjectParameter("SkuCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductReport_Result>("GetProductReport", mainCategoryIdParameter, subCategoryIdParameter, brandIdParameter, skuCodeParameter);
        }
    
        public virtual ObjectResult<GetTicketBy_TDID_Result> GetTicketBy_TDID(Nullable<long> tdid)
        {
            var tdidParameter = tdid.HasValue ?
                new ObjectParameter("tdid", tdid) :
                new ObjectParameter("tdid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketBy_TDID_Result>("GetTicketBy_TDID", tdidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetTicketByQr(string qr)
        {
            var qrParameter = qr != null ?
                new ObjectParameter("qr", qr) :
                new ObjectParameter("qr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTicketByQr", qrParameter);
        }
    
        public virtual ObjectResult<GetTotalAmountForCash_Result> GetTotalAmountForCash(Nullable<System.DateTime> datetime, Nullable<int> paymentTypeID, Nullable<int> counterId)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("Datetime", datetime) :
                new ObjectParameter("Datetime", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalAmountForCash_Result>("GetTotalAmountForCash", datetimeParameter, paymentTypeIDParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetTotalTransactionQtyAndQty_Result> GetTotalTransactionQtyAndQty(Nullable<System.DateTime> datetime, Nullable<int> counterId)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("Datetime", datetime) :
                new ObjectParameter("Datetime", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalTransactionQtyAndQty_Result>("GetTotalTransactionQtyAndQty", datetimeParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetTransactionByGroup_Result> GetTransactionByGroup(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionByGroup_Result>("GetTransactionByGroup", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> InsertDraft(Nullable<System.DateTime> dateTime, Nullable<int> userId, Nullable<int> counterId, string type, Nullable<bool> isPaid, Nullable<bool> isActive, Nullable<int> paymentTypeId, Nullable<int> discountAmount, Nullable<long> totalAmount, Nullable<long> recieveAmount)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(long));
    
            var recieveAmountParameter = recieveAmount.HasValue ?
                new ObjectParameter("RecieveAmount", recieveAmount) :
                new ObjectParameter("RecieveAmount", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertDraft", dateTimeParameter, userIdParameter, counterIdParameter, typeParameter, isPaidParameter, isActiveParameter, paymentTypeIdParameter, discountAmountParameter, totalAmountParameter, recieveAmountParameter);
        }
    
        public virtual ObjectResult<string> InsertTicket(Nullable<long> transactionDetailId, Nullable<bool> status, Nullable<System.DateTime> createDate, string category, string counterCode, Nullable<int> qty)
        {
            var transactionDetailIdParameter = transactionDetailId.HasValue ?
                new ObjectParameter("transactionDetailId", transactionDetailId) :
                new ObjectParameter("transactionDetailId", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var counterCodeParameter = counterCode != null ?
                new ObjectParameter("CounterCode", counterCode) :
                new ObjectParameter("CounterCode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertTicket", transactionDetailIdParameter, statusParameter, createDateParameter, categoryParameter, counterCodeParameter, qtyParameter);
        }
    
        public virtual ObjectResult<string> InsertTransaction(Nullable<System.DateTime> dateTime, Nullable<int> userId, Nullable<int> counterId, string type, Nullable<bool> isPaid, Nullable<bool> isActive, Nullable<int> paymentTypeId, Nullable<int> discountAmount, Nullable<long> totalAmount, Nullable<long> recieveAmount, Nullable<int> shopId, string shopCode, string note)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(long));
    
            var recieveAmountParameter = recieveAmount.HasValue ?
                new ObjectParameter("RecieveAmount", recieveAmount) :
                new ObjectParameter("RecieveAmount", typeof(long));
    
            var shopIdParameter = shopId.HasValue ?
                new ObjectParameter("ShopId", shopId) :
                new ObjectParameter("ShopId", typeof(int));
    
            var shopCodeParameter = shopCode != null ?
                new ObjectParameter("ShopCode", shopCode) :
                new ObjectParameter("ShopCode", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertTransaction", dateTimeParameter, userIdParameter, counterIdParameter, typeParameter, isPaidParameter, isActiveParameter, paymentTypeIdParameter, discountAmountParameter, totalAmountParameter, recieveAmountParameter, shopIdParameter, shopCodeParameter, noteParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertTransactionDetail(string transactionId, Nullable<int> productId, Nullable<int> qty, Nullable<int> unitPrice, Nullable<double> discountRate, Nullable<int> totalAmount, Nullable<bool> isDeleted, Nullable<bool> isFOC, Nullable<int> sellingPrice)
        {
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(int));
    
            var discountRateParameter = discountRate.HasValue ?
                new ObjectParameter("DiscountRate", discountRate) :
                new ObjectParameter("DiscountRate", typeof(double));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isFOCParameter = isFOC.HasValue ?
                new ObjectParameter("IsFOC", isFOC) :
                new ObjectParameter("IsFOC", typeof(bool));
    
            var sellingPriceParameter = sellingPrice.HasValue ?
                new ObjectParameter("SellingPrice", sellingPrice) :
                new ObjectParameter("SellingPrice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertTransactionDetail", transactionIdParameter, productIdParameter, qtyParameter, unitPriceParameter, discountRateParameter, totalAmountParameter, isDeletedParameter, isFOCParameter, sellingPriceParameter);
        }
    
        public virtual int Paid(Nullable<bool> paid, string id)
        {
            var paidParameter = paid.HasValue ?
                new ObjectParameter("paid", paid) :
                new ObjectParameter("paid", typeof(bool));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Paid", paidParameter, idParameter);
        }
    
        public virtual ObjectResult<string> ProductCdoe(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductCdoe", prefixParameter);
        }
    
        public virtual ObjectResult<ProductReportByBId_Result> ProductReportByBId(Nullable<int> brandId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByBId_Result>("ProductReportByBId", brandIdParameter);
        }
    
        public virtual ObjectResult<ProductReportByCId_Result> ProductReportByCId(Nullable<int> mainCategoryId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByCId_Result>("ProductReportByCId", mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportByCIdAndBId_Result> ProductReportByCIdAndBId(Nullable<int> brandId, Nullable<int> mainCategoryId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByCIdAndBId_Result>("ProductReportByCIdAndBId", brandIdParameter, mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportBySCIdAndCId_Result> ProductReportBySCIdAndCId(Nullable<int> mainCategoryId, Nullable<int> subCategoryId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportBySCIdAndCId_Result>("ProductReportBySCIdAndCId", mainCategoryIdParameter, subCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportBySCIdAndCIdAndBId_Result> ProductReportBySCIdAndCIdAndBId(Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> brandId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportBySCIdAndCIdAndBId_Result>("ProductReportBySCIdAndCIdAndBId", mainCategoryIdParameter, subCategoryIdParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownByRangeWithSaleTrueValue_Result> SaleBreakDownByRangeWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSp, string currentshortcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownByRangeWithSaleTrueValue_Result>("SaleBreakDownByRangeWithSaleTrueValue", fromDateParameter, toDateParameter, isSpParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownByRangeWithUnitValue_Result> SaleBreakDownByRangeWithUnitValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSp, string currentshortcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownByRangeWithUnitValue_Result>("SaleBreakDownByRangeWithUnitValue", fromDateParameter, toDateParameter, isSpParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownBySegmentWithSaleTrueValue_Result> SaleBreakDownBySegmentWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSp, string currentshortcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownBySegmentWithSaleTrueValue_Result>("SaleBreakDownBySegmentWithSaleTrueValue", fromDateParameter, toDateParameter, isSpParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownBySegmentWithUnitValue_Result> SaleBreakDownBySegmentWithUnitValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSp, string currentshortcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownBySegmentWithUnitValue_Result>("SaleBreakDownBySegmentWithUnitValue", fromDateParameter, toDateParameter, isSpParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<SaleItemListByDate_Result> SaleItemListByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleItemListByDate_Result>("SaleItemListByDate", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SelectItemListByDate_Result> SelectItemListByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectItemListByDate_Result>("SelectItemListByDate", fromDateParameter, toDateParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<SelectItemListByDateForItemSummary_Result> SelectItemListByDateForItemSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> productId, Nullable<bool> isFOC, string currentshortcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var isFOCParameter = isFOC.HasValue ?
                new ObjectParameter("IsFOC", isFOC) :
                new ObjectParameter("IsFOC", typeof(bool));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectItemListByDateForItemSummary_Result>("SelectItemListByDateForItemSummary", fromDateParameter, toDateParameter, isSaleParameter, productIdParameter, isFOCParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<TicketDetailReport_Result> TicketDetailReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> counterId, Nullable<int> cashierId, string category, Nullable<System.DateTime> fromTime, Nullable<System.DateTime> toTime)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var cashierIdParameter = cashierId.HasValue ?
                new ObjectParameter("CashierId", cashierId) :
                new ObjectParameter("CashierId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("fromTime", fromTime) :
                new ObjectParameter("fromTime", typeof(System.DateTime));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("toTime", toTime) :
                new ObjectParameter("toTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TicketDetailReport_Result>("TicketDetailReport", fromDateParameter, toDateParameter, counterIdParameter, cashierIdParameter, categoryParameter, fromTimeParameter, toTimeParameter);
        }
    
        public virtual ObjectResult<TicketSummaryReport_Result> TicketSummaryReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TicketSummaryReport_Result>("TicketSummaryReport", fromDateParameter, toDateParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<Top100SaleItemList_Result> Top100SaleItemList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAmount, Nullable<int> num, string currentshortcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isAmountParameter = isAmount.HasValue ?
                new ObjectParameter("IsAmount", isAmount) :
                new ObjectParameter("IsAmount", typeof(bool));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Top100SaleItemList_Result>("Top100SaleItemList", fromDateParameter, toDateParameter, isAmountParameter, numParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<TransactionDetailByItem_Result> TransactionDetailByItem(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> brandId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailByItem_Result>("TransactionDetailByItem", fromDateParameter, toDateParameter, isSaleParameter, mainCategoryIdParameter, subCategoryIdParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReport_Result> TransactionDetailReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> counterId, Nullable<bool> isFOC, string currentshortcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var isFOCParameter = isFOC.HasValue ?
                new ObjectParameter("IsFOC", isFOC) :
                new ObjectParameter("IsFOC", typeof(bool));
    
            var currentshortcodeParameter = currentshortcode != null ?
                new ObjectParameter("currentshortcode", currentshortcode) :
                new ObjectParameter("currentshortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReport_Result>("TransactionDetailReport", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, mainCategoryIdParameter, subCategoryIdParameter, counterIdParameter, isFOCParameter, currentshortcodeParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBId_Result> TransactionDetailReportByBId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBId_Result>("TransactionDetailReportByBId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBIdAndCId_Result> TransactionDetailReportByBIdAndCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> mainCategoryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBIdAndCId_Result>("TransactionDetailReportByBIdAndCId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBIdAndCIdAndSCId_Result> TransactionDetailReportByBIdAndCIdAndSCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> mainCategoryId, Nullable<int> subCategoryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBIdAndCIdAndSCId_Result>("TransactionDetailReportByBIdAndCIdAndSCId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, mainCategoryIdParameter, subCategoryIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByCId_Result> TransactionDetailReportByCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> mainCategoryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByCId_Result>("TransactionDetailReportByCId", fromDateParameter, toDateParameter, isSaleParameter, mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportBySCIdAndCId_Result> TransactionDetailReportBySCIdAndCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> subCategoryId, Nullable<int> mainCategoryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportBySCIdAndCId_Result>("TransactionDetailReportBySCIdAndCId", fromDateParameter, toDateParameter, isSaleParameter, subCategoryIdParameter, mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateTicketby_No(string qr)
        {
            var qrParameter = qr != null ?
                new ObjectParameter("qr", qr) :
                new ObjectParameter("qr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateTicketby_No", qrParameter);
        }
    }
}
